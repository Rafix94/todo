version: '3.8'
services:
  configserver:
    container_name: configserver
    image: ravv1/configserver:v1
    ports:
      - 8090:8090
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 300s
    networks:
      - todo
  eureka:
    container_name: eureka
    image: ravv1/eureka:v1
    ports:
      - 8091:8091
    healthcheck:
      test: "curl --fail --silent localhost:8091/actuator/health/readiness| grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 15s
    networks:
      - todo
    depends_on:
      configserver:
        condition: service_healthy

  postgres-useragent:
    container_name: postgres-useragent
    image: postgres:16.2
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: useragent_db
    ports:
      - "5432:5432"
    volumes:
      - useragent_data:/var/lib/postgresql/data
    networks:
      - todo
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  useragent:
    container_name: useragent
    image: ravv1/useragent:v1
    environment:
      _JAVA_OPTIONS: >
        -Xdebug
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - 8092:8092
      - 5005:5005
    healthcheck:
      test: "curl --fail --silent localhost:8092/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 15s
    networks:
      - todo
    depends_on:
      configserver:
        condition: service_healthy
      eureka:
        condition: service_healthy
      postgres-useragent:
        condition: service_healthy

  edgeserver:
    container_name: edgeserver
    image: ravv1/edgeserver:v1
    ports:
      - 8093:8093
    healthcheck:
      test: "curl --fail --silent localhost:8093/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 15s
    networks:
      - todo
    depends_on:
      useragent:
        condition: service_healthy
      postgres-edgeserver:
        condition: service_healthy

  postgres-edgeserver:
    container_name: postgres_edge_server
    image: postgres:16.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: edge_server_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_edge:/var/lib/postgresql/data
    networks:
      - todo
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
  ui:
    container_name: ui
    image: ravv1/ui:v1
    ports:
      - "4200:4200"
    restart: always
    networks:
      - todo
  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    networks:
      - todo
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - todo
  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - todo
volumes:
  useragent_data:
  postgres_data_edge:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
networks:
  todo:
    driver: "bridge"

